using HtmlAgilityPack;
using MGOBankApp.BLL.Interfaces;
using MGOBankApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace MGOBankApp.BLL.Utilities
{
    public class VulnerabilityAnalyzer : IVulnerabilityAnalyzer
    {
        private readonly HttpClient _httpClient;
        public VulnerabilityAnalyzer(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }
        public bool CsrfTest(string method, HtmlNode form)
        {
            var csrfToken = form.SelectSingleNode(".//input[@name='csrf_token']");
            if (csrfToken == null && method == "post")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public async Task<bool> SqlInjectionTest(Dictionary<string, string> data, string method, string absoluteAction)
        {
            var normalPayload = "test";
            foreach (var key in data.Keys)
                data[key] = normalPayload;

            var (normalResponse, normalStatusCode) = await SendRequest(method, absoluteAction, data);

            var sqliPayload = "' OR 1=1 --";
            foreach (var key in data.Keys)
                data[key] = sqliPayload;

            var (sqliResponse, sqliStatusCode) = await SendRequest(method, absoluteAction, data);

            if (sqliStatusCode >= 200 && sqliStatusCode < 300 || normalStatusCode != sqliStatusCode)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public async Task<bool> XssTest(string method, string absoluteAction, Dictionary<string, string> data)
        {
            var xssPayload = "<script>alert('xss')</script>";
            foreach (var key in data.Keys)
                data[key] = xssPayload;

            var (xssResponse, _) = await SendRequest(method, absoluteAction, data);
            if (xssResponse.Contains(xssPayload))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public async Task<(string response, int statusCode)> SendRequest(string method, string action, Dictionary<string, string> data)
        {
            HttpResponseMessage response;

            if (method == "post")
            {
                var content = new FormUrlEncodedContent(data);
                response = await _httpClient.PostAsync(action, content);
            }
            else
            {
                var query = string.Join("&", data.Select(kvp => $"{Uri.EscapeDataString(kvp.Key)}={Uri.EscapeDataString(kvp.Value)}"));
                response = await _httpClient.GetAsync($"{action}?{query}");
            }

            return (await response.Content.ReadAsStringAsync(), (int)response.StatusCode);
        }
        public bool IsHttp(Uri baseUri)
        {
            return baseUri.Scheme.Equals("http", StringComparison.OrdinalIgnoreCase);
        }
        public int calculateVulnerabilityCount(Vulnerability vulnerability)
        {
            int vulnCount = 0;
            if (vulnerability.SQLi) vulnCount++;
            if (vulnerability.XSS) vulnCount++;
            if (vulnerability.CSRF) vulnCount++;
            if (vulnerability.HTTPWithoutS) vulnCount++;
            return vulnCount;
        }
    }
}
